LIBRARY "tables" 	LANGUAGE SQLSCRIPT AS	 		BEGIN	  /* Shared variables*/ 	  private variable cSchemaForLake constant nvarchar(20) := 'LAKE';      	/*Create table */	  PUBLIC PROCEDURE "create" ( in header  "coremodel.tt_tableDefinitionHeader",	                              in fields  "coremodel.tt_tableDefinitionFields")		LANGUAGE SQLSCRIPT		SQL SECURITY DEFINER AS		  		  		BEGIN		  /*Create table, 		    add fields 		 		 create table 		    */    		    		                                         		END;							    PUBLIC function "_formatterDataType" ( in datatype  nvarchar(127),	                                        in datascale nvarchar(127) ) 	    returns datatypeSql nclob		LANGUAGE SQLSCRIPT		SQL SECURITY DEFINER AS		 BEGIN  		   if UPPER(:datatype) in ( 'BOOLEAN',    'DATE', 'TIME', 'SECONDDATE',		                     'TIMESTAMP',  'BLOB', 'CLOB','NCLOB','TEXT','BINTEXT',		   	                 'INTEGER',    'TINYINY','SMALLINT','INTEGER','BIGINT',		   	                 'SMALLDECIMAL','REAL','DOUBLE', 'FLOAT' )  then 		    datatypeSql := :datatype;		   elseif UPPER(:datatype) in ('VARCHAR', 'NVARCHAR', 'ALPHANUM', 'SHORTTEXT', 'VARBINARY', 'DECIMAL', 'FLOAT') then		     datatypeSql := :datatype || '(' || :datascale || ')';		     		   else 		   datatypeSql := 'Unknown';		   end if;		   		        END;      			/*Create table SQL */	  PUBLIC function "createSQL" ( in tabletype nvarchar(256),	                                in header  "coremodel.tt_tableDefinitionHeader",	                                in fields  "coremodel.tt_tableDefinitionFields") 	    returns table (sqlstring nclob)		LANGUAGE SQLSCRIPT		SQL SECURITY DEFINER AS		  primerSql nclob :=  'CREATE ' || CHAR(32) || :tabletype;          sqlString nclob := '';          fieldString nclob := '';          tempFieldString nclob := '';		  i         integer;		BEGIN          -- return select 'TestSQL' as sqlstring from dummy;                   primerSql :=  :primerSql || CHAR(32) || '"' || :header."data.schemaName"[1] || '"' || '.'                         || '"' || :header."key.tableName"[1] || '"' ;                   -- Add fields           if record_count(:fields) > 0 then            sqlString := :primerSQl || CHAR(32) || '(';                           FOR i IN 1..RECORD_COUNT(:Fields) DO             fieldString := :fieldString || '"' || :fields."key.fieldName"[:i] || '"' || CHAR(32)                || "_formatterDataType"(:fields."data.dataType"[:i], :fields."data.dataScale"[:i]);                          -- more fields then add comma if not last                            if :i < RECORD_COUNT(:Fields) then                fieldString := :fieldString || ',';             else               fieldString := :fieldString;             end if;                /*"key.tableName"  "key.fieldName"  "data.pos"  "data.description"  "data.dataType"  "data.dataScale"  */           END FOR;                                  sqlString := :sqlString || CHAR(32) || :fieldString || ')';                    end if;                              return select sqlString from dummy;                 		END;							END;